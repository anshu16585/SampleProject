define([
    "durandal/system",
    "durandal/app",
    "durandal/events",
    "knockout",
    "i18next",
    "mpages/logger",
    "jquery",
    "knockout.datePicker",
    "knockout.timeSpinner"
], function (system, app, events, ko, i18n, dataService, viewPointHelper, logger) {
    "use strict";

    var PopoverVm = function () {

        /**
         * id of Sample record to be updated
         * @type {Number}
         * @public
         */
        this.sSampleId = 0;

        this.bIsSubmitEnabled = ko.pureComputed(function () {
            var self = this;
            /**
            * Determines if Valid value is selected and it has value in the Search Input.
            * @returns {boolean} true if if Valid value is selected and it has value in the Search Input, otherwise false.
            */
            function isValid() {
                if (self.bToShowDirectory()) {
                    return self.sPersonInput() != '';
                }
                return true;
            }
            return isValid()

        }, this);


        /**
         * Reference of parent popover frame if the view is launched from showPopover.
         * @type {object}
         * @public
         */
        this.oParentPopoverVm = null;

        /**
        * Search text for Person.
        * @type {string}
        * @public
        */
        this.sPersonInput = ko.observable("");

        /**
         * Observable binded to person selection
         * @type {knockout.observable.<Object>}
         * @public
         */
        this.oReferToPerson = ko.observable({ CODE: 0, DISPLAY: "" });

        /**
         * Observable binded to facility selection
         * @type {knockout.observable.<Object>}
         * @public
         */
        this.oFacility = ko.observable({ CODE: 0, DISPLAY: "" });

        /**
        * Determines if directory section is enabled.
        * @type {knockout.computed.<boolean>}
        */
        this.bToShowDirectorySection = ko.pureComputed(function () {
            return (this.bToShowDirectory());
        }, this);
    };

    /**
     * Close current popover without updating any information.
     * @returns {undefined} Nothing
     */
    PopoverVm.prototype.cancel = function () {
        this.oParentPopoverVm.close();
    };
    /**
     * Submits status update to transaction and closes this popover if the update succeeded.
     * @returns {undefined} Nothing
     */
    PopoverVm.prototype.submit = function () {
        /**
         * Updates current status.
         * @param {Date} oDateTime - The date object of schedule date time
         * @returns {Object} A promise object represents status update result.
         */
        function updateStatus(oDateTime) {
            if (self.bToShowDirectory()) {
                return dataService.transferToCC(this.sSampleId, this.oReferToPerson(), this.oReferToFacility());
            }
        }

        var self = this;
        var oDateTime = self.oScheduledDate();
        if (self.bIsSubmitEnabled() === true) {

            self.bIsUpdatingStatus(true);
            logger.log("Updates status from " + self.sCurrentStatusMeaning + " to " + self.oStatus().MEANING);
            updateStatus.bind(self)(oDateTime)
                .then(function () {
                    app.trigger("sampleDetailView-updateStatus", self.oStatus().MEANING);
                    self.oParentPopoverVm.close({
                        oStatus: self.oStatus(),
                    });
                    if (self.bToShowDirectory()) {
                        app.trigger("sampleDetailView-requestUpdateData")
                    }
                })
                .fail(function () {
                    statusUpdateManualTimer.setSubEvent("Fail").publish();
                    app.showMessage(
                        i18n.t("app:modules.sampleView.sampleUpdatePopover.updateFailureMsg"),
                        i18n.t("app:modules.sampleView.header"),
                        [i18n.t("app:modules.sampleView.sampleUpdatePopover.okLabel")],
                        true);
                })
                .always(function () {
                    self.bIsUpdatingStatus(false);
                });
        }
    };

    /**
     * Runs automatically when the view model reaches the activation stage of its lifecycle.
     * @param {Object} activationData - Object contains data for view activation
     * @returns {undefined} Nothing
     * @public
     */
    PopoverVm.prototype.activate = function (activationData) {
        var self = this;
        // .popoverPlugin property is generated by showPopover function, this will never be null or undefined as long as this view is launched through showPopover.
        self.oParentPopoverVm = activationData.popoverPlugin;
        if (activationData
            && activationData.aoOptions
            && activationData.sSampleId !== undefined) {
            self.sSampleId = activationData.sSampleId;
        }
    };

    /**
     * handler function for knockout.search. Returns a promise contains an array of search results.
     * @param {string} sSearchKey - The string of search key.
     * @returns {object<promise>} A promise object contains an arry of search results.
     */
    PopoverVm.prototype.searchPerson = function (sType) {
        var self = this;
        var sSampleId2 = 0;
        var iInd = 1;
        var fSampleId3 = 0;

        app.showDialog("SampleView/viewmodels/sampleDirectory", { sSearchString: "", sSampleId2Cd: sSampleId2, fSampleId3: fSampleId3, sType: sType, iInd: iInd })
            .then(function (directorySelectedData) {
                var oSelected;

                if (directorySelectedData === null || typeof directorySelectedData === "undefined") {
                    return;
                }

                oSelected = directorySelectedData.acceptedItems[0];
                self.sPersonInput((oSelected.PersonId > 0 ? oSelected.sampleLocationName + ' - ' + oSelected.PersonName : oSelected.sampleLocationName));
                self.oPerson({ DISPLAY: oSelected.PersonName || "", CODE: oSelected.PersonId || 0 });
                self.oFacility({ DISPLAY: oSelected.sampleLocationName, CODE: oSelected.sampleLocationId, MEANING: "SITE" });
            });
        return PopoverVm;
    };


    /**
     * Runs automatically when the view model reaches the detached stage of its lifecycle.
     * @returns {undefined} Nothing
     * @public
     */
    PopoverVm.prototype.detached = function (view, parentView, bindings) {
        this.bIsSubmitEnabled.dispose();
        this.bToShowDirectorySection.dispose();
        bindings.model = null;
        bindings.child = null;
        bindings.parent = null;
    };

    return PopoverVm;
});
